#!/usr/bin/env python

# Copyright 2016 NeuroData (http://neurodata.io)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# ndmg_bids.py
# Created by Greg Kiar on 2016-07-25.
# Email: gkiar@jhu.edu

from argparse import ArgumentParser
from datetime import datetime
from subprocess import Popen, PIPE
import os.path as op
import os
import sys
import ndmg.scripts.ndmg_pipeline as ndmg_pipeline
import numpy as np
import nibabel as nb


subj_tag = 'sub-'
sesh_tag = 'ses-'
anat_tag = 'anat'
dwi_tag = 'dwi'

# Structure:
# sub-<subject id>/
#   ses-<session id>/
#     anat/
#       sub-<subject id>_ses-<session id>_T1w.nii.gz
#     dwi/
#       sub-<subject id>_ses-<session id>_dwi.nii.gz
#       sub-<subject id>_ses-<session id>_dwi.bval
#       sub-<subject id>_ses-<session id>_dwi.bvec


def main():
    parser = ArgumentParser(description="This is an end-to-end connectome \
                            estimation pipeline from sMRI and DTI images")
    parser.add_argument("-i", "--bids-dir", action="store",
                        help="Base directory for input data")
    parser.add_argument("-o", "--output-dir", action="store",
                        help="Base directory to store derivaties")
    parser.add_argument("-p", "--participant-label", action="store",
                        help="Subject ID to be analyzed")
    parser.add_argument("-s", "--session-label", action="store",
                        help="Session ID to be analyzed (if multiple exist)")
    result = parser.parse_args()

    inDir = result.bids_dir
    outDir = result.output_dir
    subj = result.participant_label
    sesh = result.session_label

    if inDir is None or outDir is None or subj is None:
        sys.exit("Error: Missing input, output directory or subject id.\
                 \n Try 'ndmg_bids -h' for help")

    subj_dir_contents = next(os.walk(op.join(inDir, subj_tag + subj)))[1]
    if any(sesh_tag in item for item in subj_dir_contents):
        if sesh is None:
            sys.exit("Multiple sessions found, no session provided.\
                     \n Try 'ndmg_bids -h' for help")
        elif any(sesh_tag + sesh is item for item in subj_dir_contents):
            print sesh_tag + sesh
            sys.exit("Session ID provided does not match those found.\
                     \nSessions found: " + ", ".join(subj_dir_contents) +\
                     "\n Try 'ndmg_bids -h' for help")
    loc = '%s/%s%s/%s%s/' % (inDir, subj_tag, subj, sesh_tag, sesh)
    print(loc)

    # Create output directory
    #   cmd = "mkdir -p " + result.outdir + " " + result.outdir + "/tmp"
    #   print "Creating output directory: " + result.outdir
    #   print "Creating output temp directory: " + result.outdir + "/tmp"
    #   p = Popen(cmd, stdout=PIPE, stderr=PIPE, shell=True)
    #   p.communicate()

    #   ndmg_pipeline(result.dti, result.bval, result.bvec, result.mprage,
    #                 result.atlas, result.mask, result.labels, result.outdir,
    #                 result.clean, result.fmt)


if __name__ == "__main__":
    main()
