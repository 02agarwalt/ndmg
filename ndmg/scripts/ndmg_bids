#!/usr/bin/env python

# Copyright 2016 NeuroData (http://neurodata.io)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# ndmg_bids.py
# Created by Greg Kiar on 2016-07-25.
# Email: gkiar@jhu.edu

from argparse import ArgumentParser
from datetime import datetime
from subprocess import Popen, PIPE
import os.path as op
import os
import sys
import ndmg.scripts.ndmg_pipeline as ndmg_pipeline
from ndmg.scripts.ndmg_setup import get_files
import numpy as np
import nibabel as nb

# Define organizational variables
subj_tag = 'sub-'
sesh_tag = 'ses-'
anat_tag = 'anat'
dwi_tag = 'dwi'
bval_ext = '.bval'
bvec_ext = '.bvec'
imgs_ext = ('*.nii', '*.nii.gz')

# Data structure:
# sub-<subject id>/
#   ses-<session id>/
#     anat/
#       sub-<subject id>_ses-<session id>_T1w.nii.gz
#     dwi/
#       sub-<subject id>_ses-<session id>_dwi.nii.gz
#   *   sub-<subject id>_ses-<session id>_dwi.bval
#   *   sub-<subject id>_ses-<session id>_dwi.bvec
#
# *these files can be anywhere up stream of the dwi data, and are inherited.

def main():
    parser = ArgumentParser(description="This is an end-to-end connectome \
                            estimation pipeline from sMRI and DTI images")
    parser.add_argument("-i", "--bids-dir", action="store",
                        help="Base directory for input data")
    parser.add_argument("-o", "--output-dir", action="store",
                        help="Base directory to store derivaties")
    parser.add_argument("-p", "--participant-label", action="store",
                        help="Subject ID to be analyzed")
    parser.add_argument("-s", "--session-label", action="store",
                        help="Session ID to be analyzed (if multiple exist)")
    result = parser.parse_args()

    inDir = result.bids_dir
    outDir = result.output_dir
    subj = result.participant_label
    sesh = result.session_label

    if inDir is None or outDir is None or subj is None:
        sys.exit("Error: Missing input, output directory or subject id.\
                 \n Try 'ndmg_bids -h' for help")

    subj_dir_contents = next(os.walk(op.join(inDir, subj_tag + subj)))[1]
    if any(sesh_tag in item for item in subj_dir_contents):
        if sesh is None:
            sys.exit("Error: Multiple sessions found, no session provided.\
                     \n Try 'ndmg_bids -h' for help")
        elif (sesh_tag + sesh) not in subj_dir_contents:
            sys.exit("Error: Session ID provided does not match those found.\
                     \nSessions found: " + ", ".join(subj_dir_contents) +\
                     "\n Try 'ndmg_bids -h' for help")

    loc = '%s/%s%s/%s%s/' % (inDir, subj_tag, subj, sesh_tag, sesh)
    print(loc)

    anat =[x[0] for x in os.walk(loc) if anat_tag in x[0]]
    anat_file = get_files(imgs_ext, anat[0])

    dwi = [x[0] for x in os.walk(loc) if dwi_tag in x[0]]
    dwi_file = get_files(imgs_ext, dwi[0])
    print anat_file
    print dwi_file

    bvec_file = []
    bval_file = []
    dwi_step = dwi[0]
    while not bval_file or not bvec_file:
        bval_file = [op.join(dwi_step, f) for f in os.listdir(dwi_step)
                     if f.endswith(bval_ext)]
        bvec_file = [op.join(dwi_step, f) for f in os.listdir(dwi_step)
                     if f.endswith(bvec_ext)]
        #bvec_file = get_files(bvec_ext, dwi_step)
        if dwi_step is op.abspath(op.join(inDir, os.pardir)):
            sys.exit("Error: No b-values or b-vectors found for this subject.\
                     \nPlease review BIDS spec (bids.neuroimaging.io).")
        dwi_step = op.abspath(op.join(dwi_step, os.pardir))

    print bval_file
    print bvec_file

    #   ndmg_pipeline(dti_file, bval_file, bvec_file, anat_file,
    #                 atlas, mask, labels, outdir, clean, fmt)


if __name__ == "__main__":
    main()
